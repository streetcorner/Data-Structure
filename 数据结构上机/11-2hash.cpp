
File name: 11-2hash.cpp
Abstract:
1.建立哈希表，采用线性探查法解决冲突.哈希函数key%13
2.在哈希表中，查找关键字记录
Version: 1.0
Last modify:2016.12.11
Copyright(c) 2016 Wang Yumeng
All rights reserved.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
#include<stdio.h>
#include<stdlib.h>
#include<iostream>
using namespace std;
#define NULLKEY UINT_MAX	//哈希表的位置为空的标志
#define  OK  1
#define  ERROR  1
#define  SUCCESS  1
#define  UNSUCCESS  0
#define  DUPLICATE  -1
#define EQ(a, b) ((a) == (b))
#define LT(a, b) ((a) < (b))
#define LQ(a, b) ((a) <= (b))

int  hashsize[] = {13, 111, 997};//哈希表容量递增表，一个合适的素数序列
typedef int ElemType;
typedef int KeyType;
typedef struct {
  ElemType  *elem;//数据元素基址
  int  ct;            // 当前数据元素个数
  int  sizeindex;// hashsize[sizeindex]为当前容量
} HashTable;

/*
 * 初始化哈希表，成功返回OK，失败返回ERROR
 */
int InitHashTable(HashTable &H)
{
	H.sizeindex = 0;
	H.ct = 0;
	H.elem = (ElemType *)malloc(hashsize[H.sizeindex] * sizeof(ElemType));
	if (NULL == H.elem) {//分配失败
		return ERROR;
	}
	for (int i = 0; i < hashsize[H.sizeindex]; i++) {
		H.elem[i] = NULLKEY;//哈希表位置为空标记为INT_MAX
	}
	return OK;
}

/*
 * 重建哈希表，成功返回OK，失败返回ERROR
 */
int RecreateHashTable(HashTable &H)
{
	int i;
	H.elem = (ElemType *)realloc(H.elem,
			hashsize[H.sizeindex + 1] * sizeof(ElemType));
	if (NULL == H.elem) {
		return ERROR;
	} else {
		for (i = hashsize[H.sizeindex];
			i < hashsize[H.sizeindex + 1]; i++) {
			H.elem[i] = NULLKEY;
		}
		H.sizeindex++;
		return OK;
	}

}
/*
 * 哈希函数，直接定址法
 在此次上机中，哈希函数定义为key%13
 */
int Hash(KeyType K)
{
	return (K%13);
}
/*
 * 产生冲突时，由开放定址法生成下个位置，c为增量，len为哈希表长，由p返回该位置

 */
int collision(int &p, int c, int len)
{
	if (c == len) {// 冲突次数 c
		return ERROR;
	} else {
		p = (p + c) % len;
		return OK;
	}
}

/*
 * 算法9.17，在开放定址哈希表H中查找关键字为K的元素，若查找成功，以p指示待查数据，并返回
 * SUCCESS，否则以p指示插入位置，并返回UNSUCCESS，c统计冲突次数，其初值为0。当查找时
 * 发现哈希表已满时则重新哈希表扩大容量。
 */
int HashSearch (HashTable H, KeyType K,int &p,int &c) {
   //在开放定址哈希表H中查找关键码为K的记录
    c=0;
    p = Hash(K);
	while ( H.elem[p] != NULLKEY &&!EQ(K, H.elem[p])){//该P地址表中有记录但不是K
        c++;			//冲突次数加1
        if (c == hashsize[H.sizeindex]) {	//哈希表已满，重建
            p = hashsize[H.sizeindex];	//插入位置
            RecreateHashTable(H);
            return UNSUCCESS;
        }
	     collision(p, c,hashsize[H.sizeindex]);// 求得下一探查地址 p
	//上面的循环在空地址或者在p地址找到c时停止
	}
	if (EQ(K, H.elem[p])) return SUCCESS;
            // 查找成功，返回待查数据元素位置 p
	else return UNSUCCESS;   // 查找不成功
} // SearchHash

int InsertHash (HashTable &H, ElemType e){
    int p,c;
    c=0;
    if (HashSearch ( H, e, p, c ) == SUCCESS )
          return DUPLICATE;
                 // 表中已有与 e 有相同关键字P的元素
    else if ( c < hashsize[H.sizeindex]/2 ) {
            // 冲突次数 c 未达到上限，（阀值 c 可调）
            H.elem[p] = e;  ++H.ct;  return OK;
            //插入e
    }
    else  RecreateHashTable(H);        // 重建哈希表
} // InsertHash
/*
 * 打印哈希表中的元素的关键字
 */
void DisplayHashTable(HashTable H)
{
    printf("The hash table is as follow:\n");
	int i;
	for (i = 0; i < hashsize[H.sizeindex]; i++) {
		if (NULLKEY != H.elem[i]) {
			printf("%d ", H.elem[i]);
		}
	}
}

int main(){

    int a[11]= {16,74,60,43,54,90,46,31,29,88,77};
    HashTable h;
    InitHashTable(h);
    for(int i=0; i<11; i++){
        InsertHash(h,a[i]);
    }
    DisplayHashTable(h);
    int key=29,p,c;
    if(HashSearch(h,key,p,c)){
        printf("\nThe element %d is in the position %d.\n",key,p);
    }
}
