
File name: 11-1AVL¶þ²æÆ½ºâÊ÷.cpp
Abstract:
AVL initialize,delete and display.
Version: 1.0
Last modify:2016.12.11
Copyright(c) 2016 Wang Yumeng
All rights reserved.

#include<stdio.h>
#include<stdlib.h>
#include<iostream>

using namespace std;
#define EQ(a, b) ((a) == (b))
#define LT(a, b) ((a) < (b))
#define LQ(a, b) ((a) <= (b))
#define LH +1//×ó¸ß
#define EH 0 //µÈ¸ß
#define RH -1 //ÓÒ¸ß
typedef int ElemType;
typedef struct BSTNode{
	ElemType	data;
	int			bf;	//Æ½ºâÒò×Ó
	struct BSTNode *lchild,*rchild;
}BSTNode,*BSTree;
//ÓÒÐý²Ù×÷
void R_Rotate(BSTree &p)
{
	BSTree lc;
	lc = p->lchild;			//lcÖ¸ÏòpµÄ×ó×ÓÊ÷
	p->lchild = lc->rchild;		//lcµÄÓÒ×ÓÊ÷¹ÒÔÚpµÄ×ó×ÓÊ÷ÏÂ
	lc->rchild = p;			//p¹ÒÔÚlcµÄ×ó×ÓÊ÷ÏÂ
	p = lc;				//pÖ¸ÏòÐÂµÄ¸ù½áµã
}
//×óÐý²Ù×÷
void L_Rotate(BSTree &p)
{
	BSTree rc;
	rc = p->rchild;
	p->rchild = rc->lchild;
	rc->lchild = p;
	p = rc;
}
//LHµÄÇé¿ö£¬×ó±ßÆ«¸ß¡£ÓÐÁ½ÖÖÇé¿ö£¬×ó×óºÍ×óÓÒ
void LeftBalance(BSTree &T)
{
	BSTree lc, rd;
	lc = T->lchild;		//lcÖ¸ÏòTµÄ£¬×ó×ÓÊ÷µÄ¸ù½áµã
	switch (lc->bf) {//¼ì²éTµÄ×ó×ÓÊ÷µÄÆ½ºâ¶È
        case LH: //ÐÂ½áµã²åÈëÔÚTµÄ×óº¢×ÓµÄ£¬×ó×ÓÊ÷ÉÏ£¬Òª×÷µ¥ÓÒÐý´¦Àí
            T->bf = lc->bf = EH;//ÓÒÐýÖ®ºóµÄÖµ
            R_Rotate(T);
            break;
        case RH:		//ÐÂ½áµã²åÈëÔÚTµÄ×óº¢×ÓµÄÓÒ×ÓÊ÷ÉÏ£¬Òª×÷Ë«Ðý´¦Àí£¬×óÓÒÐý
            rd = lc->rchild;	//rdÖ¸ÏòTµÄ£¬×óº¢×ÓµÄÓÒ×ÓÊ÷µÄ¸ù
            switch (rd->bf) {	//ÐÞ¸ÄT¼°Æä×óº¢×ÓµÄÆ½ºâÒò×Ó
                case LH:
                    T->bf = RH;
                    lc->bf = EH;
                    break;
                case EH:
                    T->bf = EH;
                    lc->bf = EH;
                    break;
                case RH:
                    T->bf = EH;
                    lc->bf = LH;
                    break;
            }
		rd->bf = EH;
		L_Rotate(T->lchild);
		R_Rotate(T);
	}

}
void RightBalance(BSTree &T)
{
	BSTree rc, ld;
	rc = T->rchild;		//rcÖ¸ÏòTµÄÓÒ×ÓÊ÷¸ù½áµã
	switch (rc->bf) {	//¼ì²éTµÄÓÒ×ÓÊ÷µÄÆ½ºâ¶È
	case RH:		//ÐÂ½áµã²åÈëÔÚTµÄÓÒº¢×ÓµÄÓÒ×ÓÊ÷ÉÏ£¬Òª×÷µ¥×óÐý´¦Àí
		T->bf = rc->bf = EH;
		L_Rotate(T);
		break;
	case LH:		//ÐÂ½áµã²åÈëÔÚTµÄÓÒº¢×ÓµÄ×ó×ÓÊ÷ÉÏ£¬Òª×÷Ë«Ðý´¦Àí
		ld = rc->lchild;	//ldÖ¸ÏòTµÄÓÒº¢×ÓµÄ×ó×ÓÊ÷¸ù½áµã
		switch (ld->bf) {
		case LH:
			T->bf = EH;
			rc->bf = RH;
			break;
		case EH:
			T->bf = EH;
			rc->bf = EH;
			break;
		case RH:
			T->bf = LH;
			rc->bf = EH;
			break;
		}
		ld->bf = EH;
		R_Rotate(T->rchild);
		L_Rotate(T);
	}
}
int InsertAVL(BSTree &T,ElemType e,bool &taller){//taller±íÊ¾Ê÷ÊÇ·ñ³¤¸ß£¬²¼¶ûÐÍ
   // printf("1111111111111\n");
	if(!T){//Èç¹û½áµã²»´æÔÚ£¬Ôò´´½¨
        //printf("1111111111111\n");
		T=(BSTree)malloc(sizeof(BSTNode));
		T->data=e;T->lchild=T->rchild=NULL;
		T->bf=EH;taller=1;
	}
	else{
		if (EQ(e,T->data)){  //ÕÒµ½£¬²»ÓÃ²åÈë½Úµã
            //printf("1111111111111\n");
            taller=0;
            return 0;
        }
		if (LT(e,T->data)){//Òª²åÈëÔÚ×ó×ÓÉÏ
		    if(!InsertAVL(T->lchild,e,taller)) return 0;
		    //µÝ¹éµ÷ÓÃÖ±ÖÁÔÚÄ³¸ö·ÖÖ¦ÉÏ²åÈë½Úµã×÷ÎªÒ¶×Ó½Úµã
		    //²åÈë³É¹¦Ê±ºò²Å»á·µ»Ø1
		    if(taller)
		    //Èç¹ûÒª³¤¸ß£¬¾ÍÅÐ¶ÏÊÇÄÄÖÖÀàÐÍ
                switch(T->bf){//¼ì²éTµÄÆ½ºâ¶È
                    case LH://×ó¸ß
                    LeftBalance(T);taller=0;break;
                    case EH:
                    T->bf=LH;taller=1;break;
                    case RH:
                    T->bf=EH;taller=0;break;
                }//switch(T->bf)
		}//if
		else{//Òª²åÈëÔÚÓÒ×ÓÉÏ
		    if(!InsertAVL(T->rchild,e,taller)) return 0;
		    //µÝ¹éÓÒ½áµã£¬²åÈë³É¹¦Ê±ºò²Å»á·µ»Ø1
		    if(taller)
                switch(T->bf){
                    case LH:
                    T->bf=EH;taller=0;break;
                    case EH:
                    T->bf=RH;taller=1;break;
                    case RH:
                    RightBalance(T);taller=0;break;
                    //ÓÒÆ½ºâº¯ÊýÃ»ÓÐ¸ø³ö
                }//switch(T->bf)
		}//else
	}//else
	return 1;
}//InsertAVL

//Ç°Ðò±éÀú
void PreOrder ( BSTree T ) {
    if ( T != NULL ) {
        //Visit( T->data);
        printf("%d",T->data);
        if(T->lchild ||T->rchild )//Ã»ÓÐº¢×Ó¾Í²»ÓÃÀ¨ºÅ
            printf("(");
        PreOrder ( T->lchild );
        if(T->rchild )//Èç¹ûÃ»ÓÐÓÒº¢×Ó¾ÍÃ»¶ººÅ
            printf(",");
        PreOrder ( T->rchild );
        if(T->lchild ||T->rchild )//Ã»ÓÐº¢×Ó¾Í²»ÓÃÀ¨ºÅ
            printf(")");
    }
}
int main(){
        BSTree T=NULL;
      int a[10]={4,9,0,1,8,6,3,5,2,7};
      int len=10;
        bool taller=1;
      for(int i=0; i<len; i++){
          InsertAVL(T,a[i],taller);
      }
      PreOrder(T);
        //InsertAVL(T,1,taller);
        //cout<<T<<endl;
}
