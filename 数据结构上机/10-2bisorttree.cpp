
File name: 10-2ary sort tree.cpp
Abstract:
Binary sort tree.
Version: 1.0
Last modify:2016.12.9
Copyright(c) 2016 Wang Yumeng
All rights reserved.

unfinished:
Ï£¶û¡¢¿ìÅÅ

#include<stdio.h>
#include<stdlib.h>
#include<iostream>


using namespace std;

typedef int KeyType;
typedef int TElemType ;
typedef struct BiTNode { // ½áµã½á¹¹
    TElemType  data;
    struct BiTNode  *lchild, *rchild; // ×óÓÒÖ¸Õë
 } BiTNode, *BiTree;
bool EQ(KeyType kval,TElemType e){
    if(kval==e)
        return 1;
    else return 0;
}
bool LT(KeyType kval,TElemType e){
    if(e> kval)
        return 1;
    else return 0;
}
int SearchBST (BiTree T, KeyType kval, BiTree f, BiTree &p ) {//t is node,f is tree flag, p is return position
    if (!T)//½áµãÎª¿ÕÖµ
    {
       // printf("oooooooooo\n");
        p = f;
        return 0;
    }  //²éÕÒ²»³É¹¦
    else  if ( EQ(kval, T->data) )
    { p = T;  return 1; }  // ²éÕÒ³É¹¦
    else  if ( LT(kval, T->data) )//ÓÒ>×ó
        return SearchBST (T->lchild, kval, T, p ); // ÔÚ×ó×ÓÊ÷ÖÐ¼ÌÐø²éÕÒ
    else
        return SearchBST (T->rchild, kval, T, p );
                             // ÔÚÓÒ×ÓÊ÷ÖÐ¼ÌÐø²éÕÒ
}
int InsertBST(BiTree &T, TElemType key ) {
    BiTNode *p=  new  BiTNode;
    if (!SearchBST ( T, key, NULL, p ))//Ã»ÕÒµ½
    {
        BiTNode *s =  new  BiTNode; // ÎªÐÂ½áµã·ÖÅä¿Õ¼ä
        s->data = key;
        s->lchild = s->rchild = NULL;

        if  ( !p )  T = s;     // ÈôÎª¿ÕÖµ£¬²åÈë s ÎªÐÂµÄÒ¶×Ó»òÕß¸ù½áµã
        else   if ( LT(key, p->data) )
                 p->lchild = s;       // ²åÈë *s Îª *p µÄ×óº¢×Ó
        else  p->rchild = s;     // ²åÈë *s Îª *p µÄÓÒº¢×Ó
        return 1;     // ²åÈë³É¹¦
    }
   else return 0;
} // Insert BST
//ÆäÖÐÉ¾³ý²Ù×÷¹ý³ÌÈçÏÂ£º
void Delete ( BiTree &p ){
   // ´Ó¶þ²æÅÅÐòÊ÷ÖÐÉ¾³ý½áµã p£¬
   // ²¢ÖØ½ÓËüµÄ×ó×ÓÊ÷»òÓÒ×ÓÊ÷
   BiTNode *q= new  BiTNode;
   BiTNode *f= new  BiTNode;
   BiTNode *s= new  BiTNode;
   if (!p->rchild)  {
    //×ó×ÓÊ÷Îª¿ÕÊ÷Ö»ÐèÖØ½ÓËüµÄÓÒ×ÓÊ÷
        q = p;
        f->lchild = p->rchild;
        delete(q);
   }
   else if (!p->lchild) {
     //ÓÒ×ÓÊ÷Îª¿ÕÊ÷ÔòÖ»ÐèÖØ½ÓËüµÄ×ó×ÓÊ÷
        q = p;
        f->lchild = p->lchild;
        delete(q);
   }
   else {
        //×óÓÒ×ÓÊ÷¾ù²»¿Õ
        q = p;
        s = p->lchild;
        while (s->rchild)
             { q = s;  s = s->rchild; }
               // s Ö¸Ïò±»É¾½áµãµÄÇ°Çýp->data = s->data;
        if (q != p )  q->rchild = s->lchild;
        else  q->lchild = s->lchild;
         // ÖØ½Ó*qµÄ×ó×ÓÊ÷
        delete(s);
   }
} // Delete
int DeleteBST (BiTree &T,  KeyType kval ) {
    if (!T)  return 0;//¿ÕÊ÷
      	//²»´æÔÚ¹Ø¼ü×ÖµÈÓÚkvalµÄÊý¾ÝÔªËØ
    else if ( EQ (kval, T->data) )
    {  Delete (T);   return 1;  }
         // ÕÒµ½¹Ø¼ü×ÖµÈÓÚkeyµÄÊý¾ÝÔªËØ
    else if ( LT (kval, T->data) )
        return DeleteBST ( T->lchild, kval );
                // ¼ÌÐøÔÚ×ó×ÓÊ÷ÖÐ½øÐÐ²éÕÒ
    else
        return DeleteBST ( T->rchild, kval );
       // ¼ÌÐøÔÚÓÒ×ÓÊ÷ÖÐ½øÐÐ²éÕÒ
} // DeleteBST

//Ç°Ðò±éÀú
void PreOrder ( BiTNode *T ) {
    if ( T != NULL ) {
        //Visit( T->data);
        printf("%d",T->data);
        if(T->lchild ||T->rchild )//Ã»ÓÐº¢×Ó¾Í²»ÓÃÀ¨ºÅ
            printf("(");
        PreOrder ( T->lchild );
        if(T->rchild )//Èç¹ûÃ»ÓÐÓÒº¢×Ó¾ÍÃ»¶ººÅ
            printf(",");
        PreOrder ( T->rchild );
        if(T->lchild ||T->rchild )//Ã»ÓÐº¢×Ó¾Í²»ÓÃÀ¨ºÅ
            printf(")");
    }
}
int main(){
    BiTree T=NULL;
    int len=10;
    int a[]={4,9,0,1,8,6,3,5,2,7};
   // InsertBST(T,1);
   // printf("%d\n",a[4]);
    for(int i=0; i<len; i++){
        InsertBST(T,a[i]);
    }

    PreOrder(T);
    return 0;
}
