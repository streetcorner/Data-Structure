
File name:7-1bitree.cpp

Abstract:Binary tree preorder ,inorder and postorder traversal
Version:1.0
Last modify:2016.10.22
Copyright(c) 2016 Wang Yumeng
All rights reserved.


#include<stdio.h>
#include<stdlib.h>

typedef char TreeData;	//结点数据类型

typedef struct node {	//结点定义
    TreeData data;
    struct node *leftchild, *rightchild;
} BiTreeNode;

typedef BiTreeNode *BiTree;//根指针

//前序建立二叉树
int CreateBiTree ( BiTree &T ) {
    char ch;
    scanf("%c",&ch);
    if ( ch=='@' ) T=NULL; //读入根结点的值
    else{
        if ( !(T=(BiTreeNode *)malloc(sizeof(BiTreeNode)))) exit(1); //建立根结点
        T->data = ch;
        // printf("OK");
        CreateBiTree ( T->leftchild );
        CreateBiTree ( T->rightchild );
        }
    //printf("YEA");
   return 1;
}//CreateBiTree
int Visit(TreeData data){
    printf("%c",data);
}
//前序遍历
void PreOrder ( BiTreeNode *T ) {
    if ( T != NULL ) {
        //Visit( T->data);
        printf("%c",T->data);
        PreOrder ( T->leftchild );
        PreOrder ( T->rightchild );
    }

}

//中序遍历（递归）
void InOrder ( BiTreeNode *T ) {
    if ( T != NULL ) {
        InOrder ( T->leftchild );
        Visit( T->data);
        InOrder ( T->rightchild );
    }
}


//后序遍历
void PostOrder ( BiTreeNode * T ) {
    if ( T != NULL ) {
        PostOrder ( T->leftchild );
        PostOrder ( T->rightchild );
        Visit( T->data);
    }
}
//计算节点个数
int Count ( BiTreeNode *T ) {
    if ( T == NULL ) return 0;
    else return 1 + Count ( T->leftchild )
                          + Count ( T->rightchild );
}
//计算叶子节点个数
int Leaf_Count(BiTree T)
{//求二叉树中叶子结点的数目
	if(!T) return 0; //空树没有叶子
 	else if(!T->leftchild&&!T->rightchild) return 1; 	//叶子结点	 
 	else return Leaf_Count(T->leftchild)+Leaf_Count(T->rightchild); //左子树的叶子数加上右子树的叶子数
}

//计算二叉树高度
int Height ( BiTreeNode * T )
{
    if ( T == NULL ) return 0;
    else{
	int m = Height ( T->leftchild );
	int n = Height ( T->rightchild ) ;
	return (m > n) ? m+1 : n+1;
	}
}

//复制二叉树
BiTreeNode* Copy( BiTreeNode * T )
{
    BiTree Temp;
	if ( T == NULL ) return NULL;
	if(!(Temp=(BiTreeNode *)malloc(sizeof(BiTreeNode)))) exit(1);
	Temp->data=T->data;
	Temp-> leftchild = Copy( T->leftchild );
	Temp-> rightchild = Copy(T->rightchild ); 	return Temp;
}

//判断等价
int Equal( BiTreeNode *a, BiTreeNode *b) {
     if ( a == NULL && b == NULL ) return 1;
     if ( a != NULL && b != NULL
	&& a->data==b->data
	&& Equal( a->leftchild, b->leftchild)
	 && Equal( a->rightchild, b->rightchild) )
	return 1;
     return 0;//如果a和b的子树不等同，则函数返回0
}


int main(){
    BiTree t,s;
    int len;

    printf("Please input your binary tree (ex:ABC@@DE@G@@F@@@):\n");
    CreateBiTree(t);

    printf("The preorder is: ");
    PreOrder(t);
    printf("\n");

    printf("The inorder is :");
    InOrder(t);
    printf("\n");

    printf("The post order is:");
    PostOrder(t);
    printf("\n");

    len=Count(t);
    printf("The number of node is: %d\n",len);

    len=Leaf_Count(t);
    printf("The number of leaf is: %d\n",len);

     len=Height(t);
    printf("The height of the binary tree is: %d\n",len);

    printf("After copy, the preorder of the copied-bitree is:\n");
    s=Copy(t);
    PreOrder(s);
    printf("\n");

    if(Equal(s,t)) printf("Equal!\n");
    else printf("Not Equal!\n");

    return 0;
}
