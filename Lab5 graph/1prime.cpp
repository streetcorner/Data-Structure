
File name: 1prime.cpp
Abstract:
use prim algorithm to solve the problem of repairing a road.
Version: 1.0
Last modify:2016.11.29
Copyright(c) 2016 Wang Yumeng
All rights reserved.

#include <iostream>
using namespace std;

#define MAX 1000000;
typedef struct AdjG
{
    int edges[200][200];
    int n;
    int e;
}AdjG;
void CreateMatrix(AdjG & g, int v)
{
    g.n = v;
    g.e = v*(v-1)/2;

    for(int i=1; i<=g.n; i++)
        for(int j=1; j<=g.n; j++)
            g.edges[i][j]=MAX;

    for(int i=1; i<=g.e; i++)
    {
        int vs, ve, cost, judge;
        cin >> vs;
        cin >> ve;
        cin >> cost;
        cin >> judge;
        if(judge == 1) cost=0;

        g.edges[vs][ve]=cost;
        g.edges[ve][vs]=cost;
    }
}
int Prim(AdjG g)
{
    int result=0;
    int low[200], vex[200];
    for(int i=1; i<=g.n; i++)
    {
        low[i]=g.edges[1][i];
        vex[i]=1;
    }
    vex[1]=-1;
    for(int i=2; i<=g.n; i++)
    {
        int minL = MAX;
        int k;
        for(int j=1; j<=g.n; j++)
        {
            if(vex[j]!=-1&&low[j]<minL)
            {
                minL = low[j];
                k=j;
            }
        }
        result+=low[k];
        vex[k]=-1;
        for(int j=1; j<=g.n; j++)
        {
            if(vex[j]!=-1&&g.edges[k][j]<low[j])
            {
                low[j] = g.edges[k][j];
                vex[j]=k;
            }
        }
    }
    return result;
}
int main()
{
    while(true)
    {
        int v;
        cin >> v;
        if(v==0)
            break;
        AdjG g;
        CreateMatrix(g, v);
        int cost = Prim(g);
        cout << cost << endl;
    }
    return 0;
}
