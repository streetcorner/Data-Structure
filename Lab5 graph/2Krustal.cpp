
File name: 1krustal.cpp
Abstract:
use kruskal algorithm to solve the problem of repairing a road.
Version: 1.0
Last modify:2016.11.29
Copyright(c) 2016 Wang Yumeng
All rights reserved.

#include <iostream>
using namespace std;

#define MAX 1000000;
struct AdjG
{
    int edges[200][200];
    int n;
    int e;
};
struct Edge
{
    int head;
    int tail;
    int weight;
};
void CreateMatrix(AdjG & g, int v)
{
    g.n = v;
    g.e = v*(v-1)/2;

    for(int i=1; i<=g.n; i++)
        for(int j=1; j<=g.n; j++)
            g.edges[i][j]=MAX;

    for(int i=1; i<=g.e; i++)
    {
        int vs, ve, cost, judge;
        cin >> vs;
        cin >> ve;
        cin >> cost;
        cin >> judge;
        if(judge == 1) cost=0;

        g.edges[vs][ve]=cost;
        g.edges[ve][vs]=cost;
    }
}

int findStart(int vexEnd[], int m)
{
    while(vexEnd[m]>0)
        m=vexEnd[m];
    return m;
}

int Kruskal(AdjG g)
{
    int vexEnd[200];
    Edge edge[200];
    int k=1;
    for(int i=1; i<=g.n; i++)
    {
        for(int j=i+1; j<=g.n; j++)
        {
            edge[k].head=i;
            edge[k].tail=j;
            edge[k].weight=g.edges[i][j];;
            k++;
        }
    }

    for(int i=1; i<k; i++)
    {
        for(int j=i+1; j<k; j++)
        {
            if(edge[i].weight > edge[j].weight)
            {
                int temp = edge[i].head;
                edge[i].head = edge[j].head;
                edge[j].head = temp;
                temp = edge[i].tail;
                edge[i].tail = edge[j].tail;
                edge[j].tail = temp;
                temp = edge[i].weight;
                edge[i].weight = edge[j].weight;
                edge[j].weight = temp;
            }
        }
    }

    for(int i=1; i<=g.n; i++)
    {
        vexEnd[i]=0;
    }

    int s,e;
    int result=0;
    for(int i=1; i<=g.e; i++)
    {
        s=findStart(vexEnd, edge[i].head);
        e=findStart(vexEnd, edge[i].tail);
        if(s!=e)
        {
            vexEnd[e]=s;
            result+=edge[i].weight;
        }
    }
    return result;
}

int main()
{
    while(true)
    {
        int v;
        cin >> v;
        if(v==0)
            break;
        AdjG g;
        CreateMatrix(g, v);
        int cost = Kruskal(g);
        cout << cost << endl;
    }
    return 0;
}
